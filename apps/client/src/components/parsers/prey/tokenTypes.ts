enum ProdTokenType {
  LEFT_PAREN = 'LEFT_PAREN',
  RIGHT_PAREN = 'RIGHT_PAREN',
  LEFT_BRACE = 'LEFT_BRACE',
  RIGHT_BRACE = 'RIGHT_BRACE',
  LEFT_BRACKET = 'LEFT_BRACKET',
  RIGHT_BRACKET = 'RIGHT_BRACKET',
  COMMA = 'COMMA',
  DOT = 'DOT',
  MINUS = 'OP_MINUS',
  PLUS = 'OP_ADD',
  CONC = 'OP_CONCAT',
  STAR = 'OP_MUL',
  SEMICOLON = 'SEMICOLON',
  SLASH = 'OP_DIVIDE',
  QUOT = 'OP_INTEGER_DIVIDE',
  BSLASH = 'BSLASH',
  PERCENT = 'PERCENT',
  CARET = 'CARET',
  COLON = 'COLON',
  DOLLAR = 'DOLLAR',
  QUERY = 'QUERY',
  AMPERSAND = 'AMP',
  TILDE = 'TILDE',
  APOSTROPHE = `APOSTROPHE`,
  VBAR = 'VBAR',
  BANG = 'BANG',
  BANG_EQUAL = 'BANG_EQUAL',
  EQUAL = 'EQUAL',
  EQUAL_EQUAL = 'EQUAL_EQUAL',
  GREATER = 'GREATER_THAN',
  GREATER_EQUAL = 'GREATER_EQUAL',
  LESS = 'LESS_THAN',
  POUND = 'POUND', // comments start with pound
  LESS_EQUAL = 'LESS_EQUAL',
  KEYWORD = 'KEYWORD',
  SYMBOL = 'SYMBOL',
  INTEGER = 'INTEGER',
  REAL = 'REAL',
  STRING = 'STRING',
  FALSE = 'FALSE',
  TRUE = 'TRUE',
  NULL = 'NULL',
  AND = 'AND',
  OR = 'OR',
  NOT = 'NOT',
  XOR = 'XOR',
  NOR = 'NOR',
  NAND = 'NAND',
  XNOR = 'XNOR',
  IN = 'IN',
  IF = 'IF',
  THEN = 'THEN',
  ELSE = 'ELSE',
  LET = 'LET',
  MOD = 'OP_MOD', // 'mod'
  CONCAT = 'OP_CONCAT', // '++'
  REM = 'OP_REM', // 'rem'
  LOG = 'OP_LOG', // 'log'
  LN = 'OP_LN', // 'ln'
  LG = 'OP_LG', // 'lg'
  SQRT = 'OP_SQRT', // 'lg'
  EOF = 'EOF',
}

enum DevTokenType {
  LEFT_PAREN = 'LEFT_PAREN',
  RIGHT_PAREN = 'RIGHT_PAREN',
  LEFT_BRACE = 'LEFT_BRACE',
  RIGHT_BRACE = 'RIGHT_BRACE',
  LEFT_BRACKET = 'LEFT_BRACKET',
  RIGHT_BRACKET = 'RIGHT_BRACKET',
  COMMA = 'COMMA',
  DOT = 'DOT',
  MINUS = 'OP_MINUS',
  PLUS = 'OP_ADD',
  CONC = 'OP_CONCAT',
  STAR = 'OP_MUL',
  SEMICOLON = 'SEMICOLON',
  SLASH = 'OP_DIVIDE',
  QUOT = 'OP_INTEGER_DIVIDE',
  BSLASH = 'BSLASH',
  PERCENT = 'PERCENT',
  CARET = 'CARET',
  COLON = 'COLON',
  DOLLAR = 'DOLLAR',
  QUERY = 'QUERY',
  AMPERSAND = 'AMP',
  TILDE = 'TILDE',
  APOSTROPHE = `APOSTROPHE`,
  VBAR = 'VBAR',
  BANG = 'BANG',
  BANG_EQUAL = 'BANG_EQUAL',
  EQUAL = 'EQUAL',
  EQUAL_EQUAL = 'EQUAL_EQUAL',
  GREATER = 'GREATER_THAN',
  GREATER_EQUAL = 'GREATER_EQUAL',
  LESS = 'LESS_THAN',
  POUND = 'POUND', // comments start with pound
  LESS_EQUAL = 'LESS_EQUAL',
  KEYWORD = 'KEYWORD',
  SYMBOL = 'SYMBOL',
  INTEGER = 'INTEGER',
  REAL = 'REAL',
  STRING = 'STRING',
  FALSE = 'FALSE',
  TRUE = 'TRUE',
  NULL = 'NULL',
  AND = 'AND',
  OR = 'OR',
  NOT = 'NOT',
  XOR = 'XOR',
  NOR = 'NOR',
  NAND = 'NAND',
  XNOR = 'XNOR',
  IN = 'IN',
  IF = 'IF',
  THEN = 'THEN',
  ELSE = 'ELSE',
  LET = 'LET',
  MOD = 'OP_MOD', // 'mod'
  CONCAT = 'OP_CONCAT', // '++'
  REM = 'OP_REM', // 'rem'
  LOG = 'OP_LOG', // 'log'
  LN = 'OP_LN', // 'ln'
  LG = 'OP_LG', // 'lg'
  SQRT = 'OP_SQRT', // 'lg'
  EOF = 'EOF',
}

export const {
  LEFT_PAREN,
  RIGHT_PAREN,
  LEFT_BRACE,
  RIGHT_BRACE,
  LEFT_BRACKET,
  RIGHT_BRACKET,
  COMMA,
  DOT,
  MINUS,
  PLUS,
  CONCAT,
  SEMICOLON,
  SLASH,
  QUOT,
  BSLASH,
  PERCENT,
  MOD,
  REM,
  LOG,
  SQRT,
  LN,
  LG,
  CARET,
  COLON,
  DOLLAR,
  QUERY,
  STAR,
  AMPERSAND,
  TILDE,
  APOSTROPHE,
  VBAR,
  BANG,
  BANG_EQUAL,
  EQUAL,
  EQUAL_EQUAL,
  GREATER,
  GREATER_EQUAL,
  LESS,
  POUND,
  LESS_EQUAL,
  KEYWORD,
  SYMBOL,
  INTEGER,
  REAL,
  STRING,
  FALSE,
  TRUE,
  NULL,
  AND,
  OR,
  NOT,
  XOR,
  NOR,
  XNOR,
  NAND,
  IF,
  THEN,
  ELSE,
  LET,
  IN,
  EOF,
} = DevTokenType;

export default DevTokenType;

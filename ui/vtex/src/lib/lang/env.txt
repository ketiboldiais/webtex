
type EnvRecord = Map<string, any>;

type LookUp = { value: any; tag: "value" };
type EnvError = { value: string; tag: "error" };
type EnvRef = LookUp | EnvError;

const deref = (
  value: any
): LookUp => ({ value, tag: "value" });

const envError = (
  value: string
): EnvError => ({ value, tag: "error" });

export const isEnvError = (datum: EnvRef): datum is EnvError =>
  datum.tag === "error";

export class Env {
  private record: EnvRecord = new Map();
  private parent: Env | null;
  constructor(parent: Env | null = null) {
    this.parent = parent;
  }

  /**
   * Inserts a new name-value binding
   * into the environment record.
   */
  define(name: string, value: any): any {
    this.record.set(name, value);
    return value;
  }

  /**
   * Returns a environment error message.
   */
  private error(message: string): any {
    return envError(message);
  }

  /**
   * Assigns to the given symbol the provided value.
   * If the environment’s record does not contain
   * the given symbol, returns an error.
   */
  assign(name: string, value: any): LookUp | EnvError {
    if (this.has(name)) {
      this.record.set(name, value);
      return deref(value);
    }
    if (this.parent !== null) {
      return this.parent.assign(name, value);
    }
    return this.error(`Undefined variable: ${name}.`);
  }

  /**
   * Returns `true` if this
   * environment has the given
   * variable name, and fale otherwise.
   */
  has(name: string): boolean {
    return this.record.has(name);
  }
  /**
   * Returns the value bound to
   * the given variable name.
   * If no such value exists,
   * returns the symbol `noRecord`.
   */
  get(name: string): EnvError | LookUp {
    if (this.record.has(name)) {
      const out = this.record.get(name);
      return deref(out);
    }
    if (this.parent !== null) {
      return this.parent.get(name);
    }
    return this.error(`Variable ${name} is used before it’s declared`);
  }
}

/**
 * Creates a new environment.
 * @param parent - An enclosing environment,
 * if any. Defaults to `null`.
 */
export const env = (parent: Env | null = null) => new Env(parent);

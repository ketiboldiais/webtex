export type Spread<T1, T2> = Omit<T2, keyof T1> & T1;

export type ExprJSON = {
  type: string;
};

interface Handler<x> {
  num(expr: Num): x;
}

abstract class Expr {
  abstract accept<x>(handler: Handler<x>): x;
  type: string;
  constructor(type: string) {
    this.type = type;
  }
  abstract json(): ExprJSON;
}

type NumJSON = Spread<{
  num: number;
  type: "num";
}, ExprJSON>;

class Num extends Expr {
  accept<x>(handler: Handler<x>): x {
    return handler.num(this);
  }
  num: number;
  constructor(num: number) {
    super("num");
    this.num = num;
  }
  json(): NumJSON {
    const num = this.num;
    return { num, type: "num" };
  }
}
